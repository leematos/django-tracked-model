django-tracked-model
====================

**Simple django app for tracking db changes executed through orm. (Only
tested on python3.4 and django-1.8.1)**

Usage
=====

Basic usage
-----------

**Once installed (see ``Installation`` below), every change to tracked
model will be recorded whenever ``save`` or ``delete`` is called.**

Advanced options
----------------

Normally only model state changes are recorded, to include usefull
information about circumstances of the changes use one of

::

    model.save(request=request)
    model.save(track_token=token)

Same goes for ``model.delete()``, where ``request`` is just django
``HttpRequest`` instance, and ``token`` is result of
``tracked_model.control.create_track_token(request)`` call.

This will store djagno user making changes along with ip, host, user
agent, request path, request method, referer and request timestamp.

To access model's history, call it's ``tracked_model_history`` method

::

    >>> history = model.tracked_model_history()
    >>> history
    >>> [<History: MyModel/2015-05-10 10:23:11.123512+00:00/Created>,
         <History: MyModel/2015-05-10 11:01:39.312233+00:00/Updated>,
         <History: MyModel/2015-05-10 11:05:05.123534+00:00/Updated>]

``History`` object contains timestamp and snapshot of changes made to an
object, if ``save`` or ``delete`` was called with request provided, it
will also contain author of changes and some connection meta data.

Each snapshot can be used to recreate object to historical state with
``materialize`` method

::

    >>> hist_create = history.first()
    >>> model_at_creation = hist_create.materialize()

To rollback object to this state simply save it

::

    >>> model_at_creation.save()

All the changes are now discarded and model state is the same as of
creation.

Installation
============

0. .. code:: sh

       $ pip install django-tracked-model

1. Add ``tracked_model`` to ``INSTALLED_APPS`` in ``settings``.

2. Synch db

   .. code:: sh

       $ python manage.py migrate tracked_model

3. Mark model as trackable

::

    from django.db import models
    from tracked_model.control import TrackedModelMixin as Tracked

    class MyModel(Tracked, models.Model):
        spam = models.IntegerField()
        egg = models.TextField()

TODO
====

Restoring objects with ManyToMany is not yet tested and probably won't
work.

Tests & mods
============

If for some weird reason you want to hack around, clone repo and install
stuff from dev-reqs.txt

.. code:: sh

    $ pip install -r dev-reqs.txt

There is a Makefile with some handy shortcuts e.g.

.. code:: sh

    $ make test
    $ make qa

Poke around Makefile for details
